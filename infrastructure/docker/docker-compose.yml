version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: masked11_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: masked11
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - masked11_network

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: masked11_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: masked11
      POSTGRES_USER: masked11_user
      POSTGRES_PASSWORD: masked11_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    networks:
      - masked11_network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: masked11_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - masked11_network

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: masked11_backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/masked11?authSource=admin
      - MONGO_DB=masked11
      - POSTGRES_URL=postgres://masked11_user:masked11_password@postgres:5432/masked11?sslmode=disable
      - REDIS_URI=redis:6379
      - SESSION_SECRET=your-super-secret-key-change-in-production
      - ADMIN_EMAIL=admin@masked11.com
      - ADMIN_PASSWORD=admin123
      - ADMIN_NAME=Admin
      - APP_PORT=8080
    depends_on:
      - mongodb
      - postgres
      - redis
    volumes:
      - ../../backend:/app
      - /app/bin
    networks:
      - masked11_network

  # Frontend
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: masked11_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_SITE_URL=http://localhost:3000
    depends_on:
      - backend
    volumes:
      - ../../frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - masked11_network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: masked11_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - masked11_network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: masked11_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - masked11_network

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: masked11_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - masked11_network

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  masked11_network:
    driver: bridge
